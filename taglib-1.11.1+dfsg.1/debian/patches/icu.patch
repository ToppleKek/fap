Description: Use libICU instead of non-free Unicode files
 This patch allows getting rid of non-free, vendored files unicode.h and
 unicode.cpp. It adds a new dependency on libicu instead.
Author: Matteo Cypriani <mcy@lm7.fr>
Origin: vendor
Forwarded: no
Last-Update: 2017-01-24
diff --git a/ConfigureChecks.cmake b/ConfigureChecks.cmake
index ee4fdc2..e7eb81d 100644
--- a/ConfigureChecks.cmake
+++ b/ConfigureChecks.cmake
@@ -216,6 +216,11 @@ check_cxx_source_compiles("
   }
 " HAVE_ISO_STRDUP)
 
+# Make sure the International Components for Unicode (ICU) are installed.
+if(NOT WIN32)
+  find_package(ICU COMPONENTS uc REQUIRED)
+endif()
+
 # Determine whether zlib is installed.
 
 if(NOT ZLIB_SOURCE)
diff --git a/taglib/CMakeLists.txt b/taglib/CMakeLists.txt
index 000f793..70377cd 100644
--- a/taglib/CMakeLists.txt
+++ b/taglib/CMakeLists.txt
@@ -26,6 +26,10 @@ include_directories(
   ${CMAKE_CURRENT_SOURCE_DIR}/xm
 )
 
+if(ICU_FOUND)
+  include_directories(${ICU_INCLUDE_DIRS})
+endif()
+
 if(ZLIB_FOUND)
   include_directories(${ZLIB_INCLUDE_DIR})
 elseif(HAVE_ZLIB_SOURCE)
@@ -312,12 +316,6 @@ set(toolkit_SRCS
   toolkit/tzlib.cpp
 )
 
-if(NOT WIN32)
-  set(unicode_SRCS
-    toolkit/unicode.cpp
-  )
-endif()
-
 if(HAVE_ZLIB_SOURCE)
   set(zlib_SRCS
     ${ZLIB_SOURCE}/adler32.c
@@ -334,7 +332,7 @@ set(tag_LIB_SRCS
   ${vorbis_SRCS} ${oggflacs_SRCS} ${mpc_SRCS} ${ape_SRCS} ${toolkit_SRCS} ${flacs_SRCS}
   ${wavpack_SRCS} ${speex_SRCS} ${trueaudio_SRCS} ${riff_SRCS} ${aiff_SRCS} ${wav_SRCS}
   ${asf_SRCS} ${mp4_SRCS} ${mod_SRCS} ${s3m_SRCS} ${it_SRCS} ${xm_SRCS} ${opus_SRCS}
-  ${unicode_SRCS} ${zlib_SRCS}
+  ${zlib_SRCS}
   tag.cpp
   tagunion.cpp
   fileref.cpp
@@ -344,6 +342,10 @@ set(tag_LIB_SRCS
 
 add_library(tag ${tag_LIB_SRCS} ${tag_HDRS})
 
+if(ICU_FOUND)
+  target_link_libraries(tag ${ICU_LIBRARIES})
+endif()
+
 if(ZLIB_FOUND)
   target_link_libraries(tag ${ZLIB_LIBRARIES})
 endif()
diff --git a/taglib/toolkit/tstring.cpp b/taglib/toolkit/tstring.cpp
index 8328790..9e0f8aa 100644
--- a/taglib/toolkit/tstring.cpp
+++ b/taglib/toolkit/tstring.cpp
@@ -34,7 +34,7 @@
 #ifdef _WIN32
 # include <windows.h>
 #else
-# include "unicode.h"
+# include <unicode/ustring.h>
 #endif
 
 #include <tdebug.h>
@@ -58,19 +58,23 @@ namespace
 
 #else
 
-    using namespace Unicode;
+    // Naively convert src to a UChar buffer. u_strFromWCS() would do a better
+    // job, but can have a different outcome with some characters.
+    UChar *tmpsrc = new UChar[srcLength];
+    for (size_t i = 0; i < srcLength; ++i)
+      tmpsrc[i] = src[i];
 
-    const UTF16 *srcBegin = src;
-    const UTF16 *srcEnd   = srcBegin + srcLength;
+    int32_t unitsWritten = 0;
+    UChar32 subchar = U'\uFFFD'; // U+FFFD "REPLACEMENT CHARACTER"
+    UErrorCode errorCode = U_ZERO_ERROR;
+    u_strToUTF8WithSub(dst, dstLength, &unitsWritten,
+                       tmpsrc, srcLength,
+                       subchar, NULL, &errorCode);
 
-    UTF8 *dstBegin = reinterpret_cast<UTF8*>(dst);
-    UTF8 *dstEnd   = dstBegin + dstLength;
+    if(U_SUCCESS(errorCode))
+      len = unitsWritten;
 
-    ConversionResult result = ConvertUTF16toUTF8(
-      &srcBegin, srcEnd, &dstBegin, dstEnd, lenientConversion);
-
-    if(result == conversionOK)
-      len = dstBegin - reinterpret_cast<UTF8*>(dst);
+    delete[] tmpsrc;
 
 #endif
 
@@ -90,19 +94,25 @@ namespace
 
 #else
 
-    using namespace Unicode;
-
-    const UTF8 *srcBegin = reinterpret_cast<const UTF8*>(src);
-    const UTF8 *srcEnd   = srcBegin + srcLength;
-
-    UTF16 *dstBegin = dst;
-    UTF16 *dstEnd   = dstBegin + dstLength;
-
-    ConversionResult result = ConvertUTF8toUTF16(
-      &srcBegin, srcEnd, &dstBegin, dstEnd, lenientConversion);
+    UChar *tmpdst = new UChar[dstLength];
+
+    int32_t unitsWritten = 0;
+    UChar32 subchar = U'\uFFFD'; // U+FFFD "REPLACEMENT CHARACTER"
+    UErrorCode errorCode = U_ZERO_ERROR;
+    u_strFromUTF8WithSub(tmpdst, dstLength, &unitsWritten,
+                         src, srcLength,
+                         subchar, NULL, &errorCode);
+
+    if(U_SUCCESS(errorCode)) {
+      len = unitsWritten;
+      // Naively convert the UChar buffer (tmpdst) to a wchar_t buffer
+      // (dst). u_strToWCS() would do a better job, but can have a different
+      // outcome with some characters.
+      for (size_t i = 0; i < len; ++i)
+        dst[i] = tmpdst[i];
+    }
 
-    if(result == conversionOK)
-      len = dstBegin - dst;
+    delete[] tmpdst;
 
 #endif
 
